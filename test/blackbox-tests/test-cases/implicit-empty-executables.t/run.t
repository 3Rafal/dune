Executables with no corresponding `.mli` file will have one generated for them
by Dune:

  $ echo "(lang dune 2.8)" > dune-project
  $ dune build ./bin/executable.exe
  File "bin/executable.ml", line 1, characters 4-10:
  1 | let unused = Dependency.a
          ^^^^^^
  Error (warning 32): unused value unused.
  [1]

  $ test ! -f _build/default/bin/dependency.mli
  $ cat _build/default/bin/executable.mli
  (* Auto-generated by Dune *)

as will test binaries:

  $ dune runtest
  File "test/test.ml", line 1, characters 4-10:
  1 | let unused = 1
          ^^^^^^
  Error (warning 32): unused value unused.
  [1]

  $ cat _build/default/test/test.mli
  (* Auto-generated by Dune *)

Empty `.mli` files are only generated when lang version >= 2.8:

  $ dune clean
  $ echo "(lang dune 2.7)" > dune-project
  $ dune build ./bin/executable.exe
  $ dune runtest
  $ test ! -f _build/default/bin/executable.mli
  $ test ! -f _build/default/test/test.mli

If an executable already has an interface, it is preserved:

  $ dune clean
  $ echo "(lang dune 2.8)" > dune-project
  $ dune build ./bin_with_intf/executable.exe
  $ cat _build/default/bin_with_intf/executable.mli
  val a : int

