(* -*- tuareg -*- *)

open Stdune

open Dune_memory

let () =
  Path.Build.set_build_dir (Path.Kind.of_string (Filename.get_temp_dir_name ()));;

let dir =
  let rand_digits () =
    let rand = Random.State.(bits (make_self_init ()) land 0xFFFFFF) in
    Printf.sprintf "%06x" rand
  in
  let mk_temp_dir pat =
    let root = Filename.get_temp_dir_name ()
    in
    let raise_err msg = raise (Sys_error msg) in
    let rec loop count =
      if count < 0 then raise_err "mk_temp_dir: too many failing attemps"
      else
        let dir = Printf.sprintf "%s%s" pat (rand_digits ()) in
        try Unix.mkdir (root ^ "/" ^ dir) 0o700 ; Path.of_string dir with
        | Unix.Unix_error (Unix.EEXIST, _, _) ->
            loop (count - 1)
        | Unix.Unix_error (Unix.EINTR, _, _) ->
            loop count
        | Unix.Unix_error (e, _, _) ->
            raise_err ("mk_temp_dir: " ^ Unix.error_message e)
    in
    loop 1000
  in
  (mk_temp_dir ".dune-memory_unit-test_");;
let () =
  Path.mkdir_p dir;;
let make_file p = let path = (Path.of_string ((Path.to_string dir) ^ "/" ^ p)) in
  Io.write_file path p; path;;
let memory = DuneMemory.make ~root:(Path.of_string ((Path.to_string dir) ^ "/root")) ()

[%%expect{|
val dir : Path.t = <abstr>
val make_file : string -> Path.t = <fun>
val memory : DuneMemory.memory = <abstr>
|}]

(* Promote a file twice and check we can search it *)

let file1 = make_file "file1";;
let metadata = Sexp.List [Sexp.Atom "test"; Sexp.Atom "metadata"];;
let key = DuneMemory.key [] metadata [file1];;
DuneMemory.promote memory [(file1, Digest.file file1)] key metadata None;;
DuneMemory.promote memory [(file1, Digest.file file1)] key metadata None;;
match DuneMemory.search memory key with
| stored_metadata, [(original, promoted)] ->
   if not (Sexp.equal stored_metadata metadata) then
     failwith "Metadata mismatch"
   else if Path.equal original file1 then
     if Io.compare_files promoted file1 = Ordering.Eq then None
     else Some "promoted file content does not match"
   else Some "original file path does not match"
| _ -> Some "wrong number of file found";;

[%%expect{|
val file1 : Path.t = <abstr>
val metadata : Sexp.t = List [Atom "test"; Atom "metadata"]
val key : DuneMemory.key = <abstr>
- : DuneMemory.promotion list = [Promoted (<abstr>, <abstr>)]
- : DuneMemory.promotion list = [Already_promoted (<abstr>, <abstr>)]
- : string option = None
|}]

(* Check write permissions where removed *)

(Unix.stat (Path.to_string file1)).st_perm land 0o222 = 0;;
[%%expect{|
- : bool = true
|}]

Path.rm_rf dir;;
[%%expect{|
- : unit = ()
|}]
